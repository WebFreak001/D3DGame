statement = VOID
statement = rvalue;
statement = definition;
statement = enum
statement = Module identifierpath;
statement = Import identifierpath;
statement = struct
statement = class
statement = interface
statement = functiondef
statement = foreach;
statement = foreach;
statement = foreach;
statement = foreach;
statement = foreach;
statement = foreach;
statement = foreach;
statement = foreach;
statement = statement statement
statement = attribute statement
attribute = Public
attribute = Private
attribute = Protected
attribute = @ Identifier
identifierpath = Identifier
identifierpath = identifierpath . identifierpath
enum = Enum Identifier { enumlist }
enumlist = VOID
enumlist = lvalue
enumlist = assignment
enumlist = enumlist , enumlist
rvalue = assignment
rvalue = call
rvalue = String
rvalue = Number
rvalue = True
rvalue = False
rvalue = Null
rvalue = lvalue
rvalue = ( rvalue )
rvalue = rvalue . rvalue
rvalue = rvalue [ rvalue ]
rvalue = inlinefunctiondef
interface = Interface Identifier { statement }
functiondef = Identifer Identifier ( argumentlist ) { statement }
assignment = lvalue = rvalue
definition = Identifier Identifier
definition = Identifier Identfiier = rvalue
lvalue = Identifier
call = rvalue ( rvaluelist )
rvaluelist = VOID
rvaluelist = rvalue
rvaluelist = rvaluelist , rvaluelist
inlinefunctiondef = -> { statement }
inlinefunctiondef = => { statement }
inlinefunctiondef = (argumentlist) -> { statement }
inlinefunctiondef = (argumentlist) => { statement }
inlinefunctiondef = (argumentlist) { statement }
inlinefunctiondef = Function (argumentlist) { statement }
argumentlist = VOID
argumentlist = Identifier Identifier
argumentlist = argumentlist , argumentlist
